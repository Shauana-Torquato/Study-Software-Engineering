Titulo da disciplina: desenvolvimento web em arquitetura MVC

titulo do tema: Camada de Modelo- Mapeamento Objeto Relacional

professor: sérgio assunção monteiro

título do módulo 1: Criação das classes de modelo, suas associações e multiplicidades

	1 - Criação de classes da camada de modelo

		A - Aspectos básicos da arquitetura MVC
		
		muitas aplicações modernas interagem com sistemas gerenciadores de bancos de dados -SGBD-, realizam processamentos desses dados e exibem resultados em gráficos e relatórios. Então, podemos distinguir elementos estruturais distintos que não devem ser tratados da mesma forma

		a MVC é uma arquitetura muito utilizada na prática para organizar os códigos de um sistema. a idéia básica é que cada seção do nosso código tem uma finalidade e, portante, precisa ser tratada de uma forma específica

		uma parte do nosso código é responsável por realizar operações com o SGBD, outra parte deve focar em uma interação homem-máquina com qualidade, para que o usuário tenha uma boa experiência com a aplicação e, ainda, tem a parte do código que controlo como a nossa aplicação vai funcionar

		a MVC ajuda a organizar as funções principais do código da nossa aplicação. A consequencia disso é que ganhamos com a melhoria da organização que facilita realizar manutenções, melhorias e otimizar o trabalho em equipe

		B - Camadas da Arquitetura MVC

		Modelo, Visão e Controle

		Modelo: responsavel pela representação dos dados. A forma mais comum do seu uso é na cosntrução de classes cujos campos refletem a estrutura de tabelas de um banco de dados, além de representar as relações com outras tabelas e métodos básicos de interação com os dados no padrão get e set

		Visão: o código dessa camada é composto por todas as funções necessárias para interagir com o usuário, ou seja, ela é responsável pela interface homem-máquina

		Controle: o código dessa camada faz a conexão entre as camada Modelo e Visão, ou seja, é ela que implementa as regras de negócio do sistema

		IMAGEM 1

		Interações entre as camadas:

			- a camada de controle fornece os dados processados para a camada de visão
			- a camada de visão faz requisições para a camada de controle
			- a camada de controle faz requisições para a camada modelo
			- a camada modelo fornece os dados para a camada de controle 

		Com essa divisão de camadas, a MVC nos ajuda a organizar a construção, manutenção e melhoria de um sistema

	2 - Classes das camadas de modelo e de controle

		A - Aspectos fundamentais das classes

		uma classe faz a modelagem de entidade para o domínio de sistema
		para modelar essas entidades em classes, precisamos descrever suas propriedades por meio de atributos e um conjunto de funções que manipularão essas propriedades

		a classe é um conceito abstrat, ou seja, é um modelo para representação das entidades
		para podermos operar com dados, precisamos utilizar objetos que são instâncias de classe
			por meio de um objeto, podemos realizar operações de consulta e escrita dos atributos
			conceito de classe é o conceito fundamental da programação orientada a objetos - POO

			+ POO possui três propriedades principais

				Encapsulamento: expõe para as demais classes do programa apenas os métodos. dessa forma, a complexidade de manipular os atributos fica restrita à própria classe. Isso significa que, na prática, quando um código precisar de alguma informação de um objeto, ele simplesmente vai obtê-lo através da chamada de um método

				Herança: É capacidade de uma classe herdar as características de uma outra classe, normalmente chamada de classe-mãe. Essa propriedade é muito útil para generalizar comportamentos. Um exemplo clássico é das classes Pessoa Física e Pessoa Jurídica, que herdam as características

				Polimorfismo: Significa que métodos de mesmo nome dentro de uma classes, ou relacionados por meio da herança, podem ter comportamentos distintos ependendo do contexto de operação. Essa propriedade é útil em muitos cenários, mas deve ser usada com muita cautela para não gerar confusão. Especialmente no processo de depuração de um programa, ela pode ser um grande desafio

		B - Classes para mapeamento da entidades

		a camada de modelo trata do mapeamento explícito das tabelas do banco de dados. a ideia basica dessas classes é de representar os campos de uma tabela através de atributos e utilizar métodos do tipo getter e setter com os seguintos objetivos:
		
			+ Getter: serve para realizar consultas. por exemplo, no caso de uma class livro com um atributo "título", teremos umm método "getTitulo()" que retorna o valor do atributo "titulo"

			+ Setter: é aplicado para realizar operações de escrita. voltando ao exemplo da classe livro do intem anterior, teremos um método "setTituli(nome)" que vai atribuir o valor do parâmetro "nome" ao atributo "titulo" do livro 

			essas classes normalmente sao bem simples. os pontos que exigem mais atenção sao os dos tipos dos atributos que devem ser compativeis com os tipos dos respectivos campos das tabelas do banco de dados

		C - Objetos de acesso aos dados (DAO)

		as classes precisam ser manipuladas para que se realizem as operações no banco de dados. para tanto, utiliza-se o padrão chamado de objeto de acesso aos dados  - DAO - Data Acess Object

		o objetivo do padrão DAO é isolar a camada de negócios da camada de persistência, ou seja, do banco de dados relacional, embora possa ser qualquer outro mecanismo de persistência. O padrão dao pode ser combinado com o mapeamento objeto-relacional mais conhecido como orm - object relational mapping

		a orm é uma tecnica que faz a conversão de dados entre os bancos de dados relacionais e as linguagens orientadas a objetos, facilitando bastante o processo de contrução de uma solução, pois utiliza frameworks que já possuem métodos, os quais nos permitem fazer as operações CRUD - inserção, leitura, modificação e exclusão - sem entrar nos detalhes do SGBD

			+ um importante framework do OEM é o Hibernate. Ele realiza as operações de persistÇencia no banco de dados, ou seja, as operações CRUD. É comum utilizarmos o hibernate com o JPA, que é uma camada usada para descrever interface para um framework ORM 

	3 - Associações e multiplicidade das classes da camada de modelo

		A - Associação

		é um relacionamento entre duas classe separadas

		podemos representá-la por uma linha entre essas classes com uma seta indicando a direção da navegação

		FIGURA 2

		B - Coctividade

		corresponde ao tipo de associação entre duas classes:
			+ um para um 
			+ um para muitos
			+ muitos para um 
			+ muitos para muitos

		a conectividade da associação entre duas classes depende dos símbolos de multiplicidade que sao utilizados na associação

		- um para um: descreve uma relação exclusiva entre dois itens. exemplo: uma pessoa pode ter apenas um passaporte e um passaporte pertence apenas para uma pessoa

		- um para muitos: um item pode se relacionar a diversos outros. Exemplo: um médico pode ter muitos pacientes

		- muitos para um : muitos itens podem estar relacionados a apenas uma identidde. Exemplo: muitos livos fazem parte do acervo fisico de uma biblioteca e nao podem fayer parte do acervo fisico de outra biblioteca

		- muitos para muitos: muitos itens podem se relacionar com muitos outros - exemplo: muitos professores tem muitos alunos e muitos alunos tem muitos proffessores

		C - Multiplicidade

		representam a informçãp dos limites inferior e duperior da quantidade de objetos aos quais outro objeto pode se associar

			Nome				Simbologia na UML
			Apenas Um			1..1 (ou 1)
			Zero ou Muitos			0..* (ou *)
			Um ou Muitos			1..*
			Zero ou Um			0..1
			Intervalo Específico		li..ls		


título do módulo 2: Aplicação das Anotações JPA com hibernate

	1 - Introdução para a JPA

		A - Conceitos básicos da JPA

		A JPA é uma especificação de linguagem de programção JAVA
			Java Persistence API
		O objetivo da JPA é fazer a persistencia de dados dos objetos implementados em JAVA com o banco de dados relacional.
			JPA desempenha um papel que faz ligação entre os modelos de dominio orientados a objetos e os sitemas de banco de dados relacionais

		---
		a JPA é apenas uma especificação, logo, não realiza nenhuma operação de persistencia por si só, necessitando de outra aplicação para que uma operação de pesrisitencia seja feita. É aqui que entra as ferramentas de ORM como o Hibernate, que irá implementar as especificações JPA para a persistencia de dados
		---

		B - Arquitetura da ;jpa

		a arquitetura JPa é formada por classes e interfaces utilizadas para fazer a persistência de entidades em um banco de dados, ou seja, fazer o armazenamento dos dados em tabelas. 
		os principais componentes da arquitetura da JPA sao

			+ EntityManagerFactory: fábrica de entidades gerenciadoras, sendo utilizado para criar e gerenciar várias instâncias do componente EntityManager

			+ EntityManager: é a gerenciadora de entidades, gerenciando as operações de persistência em objetos e funciona como uma fábrica de instâncias do componente Query

			+ Entity: este componente representa os objetos que serão aramzenados como registros no banco de dados

			+ EntityTransaction: possui um relacionamento um-para0um com o entitymanager de forma que para cada entitymanager, as transações são mantidas pela classe entitytransaction

			+ Persistence: este componente comtém métodos estáticos para obter a instência do componente EntityManagerFactory

			+ Query: é uma interface que deve ser implementada por cada fornecedor JPA para obter objetos relacionais que satisfaçam critérios

		Esses componentes nos ajudam a desenvolver códigos para que possamos focar no mapeamento das classes com tabelas de banco de dados